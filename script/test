#!/bin/bash -e

# Default fly target
[ -z "$FLY_TARGET" ] && FLY_TARGET="runtime-garden"
[ -z "$FLY_ARGS" ] && FLY_ARGS="-p"

RED=1
print_message() {
  message=$1
  colour=$2
  printf "\r\033[00;3${colour}m[${message}]\033[0m\n"
}

usage() {
  colour=$1
  print_message "Usage:" "$colour"
  print_message "test --- run all the tests" "$colour"
  print_message "test <test path> --- only run tests below given path" "$colour"
  print_message "test -u --- run all unit tests" "$colour"
  print_message "test -i --- run all integration tests" "$colour"
}

compile_fly_cmd() {
  task_path=$1
  image_args=("--inputs-from" "garden-runc-release/grootfs" "--image" "garden-ci-image")

  cmd="fly -t $FLY_TARGET"
  cmd=$cmd" e -p ${image_args[*]} -c $task_path"
  cmd=$cmd" -i grootfs-git-repo=${PWD}"
  cmd=$cmd" $FLY_ARGS"
  cmd=$cmd" --"

  echo "$cmd"
}

compile_ginkgo_args() {
  test_path=${1:-""}

  args=""
  [ "$GINKGO_ARGS" != "" ] && args=$args" $GINKGO_ARGS"
  [ $RECURSIVE -eq 1 ] && args=$args" -r"
  [ "$test_path" != "" ] && args=$args" $test_path"

  echo "$args"
}

run_unit_tests() {
  test_path=${1:-""}

  echo "Running UNIT tests"

  cmd=$(compile_fly_cmd ci/tasks/unit-tests.yml)
  cmd=$cmd" "$(compile_ginkgo_args "$test_path")
  eval "$cmd"
}

run_integration_tests() {
  test_path=${1:-"integration"}


  echo "Running INTEGRATION tests"

  cmd=$(compile_fly_cmd ci/tasks/integration-tests.yml)
  cmd=$cmd" "$(compile_ginkgo_args $test_path)

  local drivers users
  users=${GROOTFS_TEST_UID:-0 5000}

  for user in $users; do
    GROOTFS_TEST_UID=$user GROOTFS_TEST_GID=$user eval $cmd
  done
}

run_all_tests() {
  if [ $RECURSIVE -ne 1 ]; then
    print_message "No suite found in root directory. Please use -r to run suites in its subdirectories." $RED
    return
  fi

  echo "Running ALL tests"

  run_unit_tests
  run_integration_tests
}

run_tests() {
  test_path=${1:-""}

  case $test_path in
    integration*)
      run_integration_tests $test_path
      ;;

    # no path - run all the tests
    "")
      run_all_tests
      ;;

    # test_path is not empty
    *)
      run_unit_tests $test_path
      ;;
    esac
}

test_path=""
RECURSIVE=0
if [ -z "$DOCKER_REGISTRY_PASSWORD" ]
then
  export DOCKER_REGISTRY_USERNAME
  DOCKER_REGISTRY_USERNAME="$(lpass show 'Shared-Garden/cf-garden-docker' --username)"
  export DOCKER_REGISTRY_PASSWORD
  DOCKER_REGISTRY_PASSWORD="$(lpass show 'Shared-Garden/cf-garden-docker' --password)"
fi

while getopts "uia" OPTION
do
  case $OPTION in
    u)
      RECURSIVE=1
      run_unit_tests
      exit
      ;;
    i)
      RECURSIVE=1
      run_integration_tests "integration"
      exit
      ;;
    a)
      tmux split-window -p 80 "/bin/bash -c \"RECURSIVE=1 FLY_TARGET='$FLY_TARGET' ./script/test -u; bash --init-file <(echo 'history -s RECURSIVE=1 FLY_TARGET='$FLY_TARGET' ./script/test -u')\""
      tmux split-window -p 67 "/bin/bash -c \"RECURSIVE=1 FLY_TARGET='$FLY_TARGET' GROOTFS_TEST_UID=5000 GROOTFS_TEST_GID=5000 ./script/test -i; bash --init-file <(echo 'history -s RECURSIVE=1 FLY_TARGET='$FLY_TARGET' GROOTFS_TEST_UID=5000 GROOTFS_TEST_GID=5000 ./script/test -i')\""
      tmux split-window -p 50 "/bin/bash -c \"RECURSIVE=1 FLY_TARGET='$FLY_TARGET' GROOTFS_TEST_UID=0 GROOTFS_TEST_GID=0 ./script/test -i; bash --init-file <(echo 'history -s RECURSIVE=1 FLY_TARGET='$FLY_TARGET' GROOTFS_TEST_UID=0 GROOTFS_TEST_GID=0 ./script/test -i')\""
      exit
      ;;
    *)
      usage $RED
      exit
      ;;
  esac
done

if [ -z "$@" ]
then
  RECURSIVE=1
fi
run_tests "$@"

