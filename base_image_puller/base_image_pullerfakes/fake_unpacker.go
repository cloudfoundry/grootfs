// Code generated by counterfeiter. DO NOT EDIT.
package base_image_pullerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/base_image_puller"
	"code.cloudfoundry.org/lager"
)

type FakeUnpacker struct {
	UnpackStub        func(lager.Logger, base_image_puller.UnpackSpec) (base_image_puller.UnpackOutput, error)
	unpackMutex       sync.RWMutex
	unpackArgsForCall []struct {
		arg1 lager.Logger
		arg2 base_image_puller.UnpackSpec
	}
	unpackReturns struct {
		result1 base_image_puller.UnpackOutput
		result2 error
	}
	unpackReturnsOnCall map[int]struct {
		result1 base_image_puller.UnpackOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnpacker) Unpack(arg1 lager.Logger, arg2 base_image_puller.UnpackSpec) (base_image_puller.UnpackOutput, error) {
	fake.unpackMutex.Lock()
	ret, specificReturn := fake.unpackReturnsOnCall[len(fake.unpackArgsForCall)]
	fake.unpackArgsForCall = append(fake.unpackArgsForCall, struct {
		arg1 lager.Logger
		arg2 base_image_puller.UnpackSpec
	}{arg1, arg2})
	stub := fake.UnpackStub
	fakeReturns := fake.unpackReturns
	fake.recordInvocation("Unpack", []interface{}{arg1, arg2})
	fake.unpackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUnpacker) UnpackCallCount() int {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	return len(fake.unpackArgsForCall)
}

func (fake *FakeUnpacker) UnpackCalls(stub func(lager.Logger, base_image_puller.UnpackSpec) (base_image_puller.UnpackOutput, error)) {
	fake.unpackMutex.Lock()
	defer fake.unpackMutex.Unlock()
	fake.UnpackStub = stub
}

func (fake *FakeUnpacker) UnpackArgsForCall(i int) (lager.Logger, base_image_puller.UnpackSpec) {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	argsForCall := fake.unpackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUnpacker) UnpackReturns(result1 base_image_puller.UnpackOutput, result2 error) {
	fake.unpackMutex.Lock()
	defer fake.unpackMutex.Unlock()
	fake.UnpackStub = nil
	fake.unpackReturns = struct {
		result1 base_image_puller.UnpackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeUnpacker) UnpackReturnsOnCall(i int, result1 base_image_puller.UnpackOutput, result2 error) {
	fake.unpackMutex.Lock()
	defer fake.unpackMutex.Unlock()
	fake.UnpackStub = nil
	if fake.unpackReturnsOnCall == nil {
		fake.unpackReturnsOnCall = make(map[int]struct {
			result1 base_image_puller.UnpackOutput
			result2 error
		})
	}
	fake.unpackReturnsOnCall[i] = struct {
		result1 base_image_puller.UnpackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeUnpacker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnpacker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ base_image_puller.Unpacker = new(FakeUnpacker)
