// Code generated by counterfeiter. DO NOT EDIT.
package base_image_pullerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/base_image_puller"
	"code.cloudfoundry.org/lager"
)

type FakeBaseDirHandler struct {
	HandleStub        func(lager.Logger, base_image_puller.UnpackSpec, string) error
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		arg1 lager.Logger
		arg2 base_image_puller.UnpackSpec
		arg3 string
	}
	handleReturns struct {
		result1 error
	}
	handleReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBaseDirHandler) Handle(arg1 lager.Logger, arg2 base_image_puller.UnpackSpec, arg3 string) error {
	fake.handleMutex.Lock()
	ret, specificReturn := fake.handleReturnsOnCall[len(fake.handleArgsForCall)]
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		arg1 lager.Logger
		arg2 base_image_puller.UnpackSpec
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.HandleStub
	fakeReturns := fake.handleReturns
	fake.recordInvocation("Handle", []interface{}{arg1, arg2, arg3})
	fake.handleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBaseDirHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeBaseDirHandler) HandleCalls(stub func(lager.Logger, base_image_puller.UnpackSpec, string) error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = stub
}

func (fake *FakeBaseDirHandler) HandleArgsForCall(i int) (lager.Logger, base_image_puller.UnpackSpec, string) {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	argsForCall := fake.handleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBaseDirHandler) HandleReturns(result1 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBaseDirHandler) HandleReturnsOnCall(i int, result1 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	if fake.handleReturnsOnCall == nil {
		fake.handleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBaseDirHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBaseDirHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ base_image_puller.BaseDirHandler = new(FakeBaseDirHandler)
