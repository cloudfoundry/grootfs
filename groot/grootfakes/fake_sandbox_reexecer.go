// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
)

type FakeSandboxReexecer struct {
	ReexecStub        func(string, groot.ReexecSpec) ([]byte, error)
	reexecMutex       sync.RWMutex
	reexecArgsForCall []struct {
		arg1 string
		arg2 groot.ReexecSpec
	}
	reexecReturns struct {
		result1 []byte
		result2 error
	}
	reexecReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSandboxReexecer) Reexec(arg1 string, arg2 groot.ReexecSpec) ([]byte, error) {
	fake.reexecMutex.Lock()
	ret, specificReturn := fake.reexecReturnsOnCall[len(fake.reexecArgsForCall)]
	fake.reexecArgsForCall = append(fake.reexecArgsForCall, struct {
		arg1 string
		arg2 groot.ReexecSpec
	}{arg1, arg2})
	stub := fake.ReexecStub
	fakeReturns := fake.reexecReturns
	fake.recordInvocation("Reexec", []interface{}{arg1, arg2})
	fake.reexecMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSandboxReexecer) ReexecCallCount() int {
	fake.reexecMutex.RLock()
	defer fake.reexecMutex.RUnlock()
	return len(fake.reexecArgsForCall)
}

func (fake *FakeSandboxReexecer) ReexecCalls(stub func(string, groot.ReexecSpec) ([]byte, error)) {
	fake.reexecMutex.Lock()
	defer fake.reexecMutex.Unlock()
	fake.ReexecStub = stub
}

func (fake *FakeSandboxReexecer) ReexecArgsForCall(i int) (string, groot.ReexecSpec) {
	fake.reexecMutex.RLock()
	defer fake.reexecMutex.RUnlock()
	argsForCall := fake.reexecArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSandboxReexecer) ReexecReturns(result1 []byte, result2 error) {
	fake.reexecMutex.Lock()
	defer fake.reexecMutex.Unlock()
	fake.ReexecStub = nil
	fake.reexecReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSandboxReexecer) ReexecReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.reexecMutex.Lock()
	defer fake.reexecMutex.Unlock()
	fake.ReexecStub = nil
	if fake.reexecReturnsOnCall == nil {
		fake.reexecReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.reexecReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSandboxReexecer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reexecMutex.RLock()
	defer fake.reexecMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSandboxReexecer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.SandboxReexecer = new(FakeSandboxReexecer)
