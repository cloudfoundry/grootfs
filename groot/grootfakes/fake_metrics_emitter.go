// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager/v3"
)

type FakeMetricsEmitter struct {
	TryEmitDurationFromStub        func(lager.Logger, string, time.Time)
	tryEmitDurationFromMutex       sync.RWMutex
	tryEmitDurationFromArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 time.Time
	}
	TryEmitUsageStub        func(lager.Logger, string, int64, string)
	tryEmitUsageMutex       sync.RWMutex
	tryEmitUsageArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 int64
		arg4 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsEmitter) TryEmitDurationFrom(arg1 lager.Logger, arg2 string, arg3 time.Time) {
	fake.tryEmitDurationFromMutex.Lock()
	fake.tryEmitDurationFromArgsForCall = append(fake.tryEmitDurationFromArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.TryEmitDurationFromStub
	fake.recordInvocation("TryEmitDurationFrom", []interface{}{arg1, arg2, arg3})
	fake.tryEmitDurationFromMutex.Unlock()
	if stub != nil {
		fake.TryEmitDurationFromStub(arg1, arg2, arg3)
	}
}

func (fake *FakeMetricsEmitter) TryEmitDurationFromCallCount() int {
	fake.tryEmitDurationFromMutex.RLock()
	defer fake.tryEmitDurationFromMutex.RUnlock()
	return len(fake.tryEmitDurationFromArgsForCall)
}

func (fake *FakeMetricsEmitter) TryEmitDurationFromCalls(stub func(lager.Logger, string, time.Time)) {
	fake.tryEmitDurationFromMutex.Lock()
	defer fake.tryEmitDurationFromMutex.Unlock()
	fake.TryEmitDurationFromStub = stub
}

func (fake *FakeMetricsEmitter) TryEmitDurationFromArgsForCall(i int) (lager.Logger, string, time.Time) {
	fake.tryEmitDurationFromMutex.RLock()
	defer fake.tryEmitDurationFromMutex.RUnlock()
	argsForCall := fake.tryEmitDurationFromArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetricsEmitter) TryEmitUsage(arg1 lager.Logger, arg2 string, arg3 int64, arg4 string) {
	fake.tryEmitUsageMutex.Lock()
	fake.tryEmitUsageArgsForCall = append(fake.tryEmitUsageArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 int64
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.TryEmitUsageStub
	fake.recordInvocation("TryEmitUsage", []interface{}{arg1, arg2, arg3, arg4})
	fake.tryEmitUsageMutex.Unlock()
	if stub != nil {
		fake.TryEmitUsageStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeMetricsEmitter) TryEmitUsageCallCount() int {
	fake.tryEmitUsageMutex.RLock()
	defer fake.tryEmitUsageMutex.RUnlock()
	return len(fake.tryEmitUsageArgsForCall)
}

func (fake *FakeMetricsEmitter) TryEmitUsageCalls(stub func(lager.Logger, string, int64, string)) {
	fake.tryEmitUsageMutex.Lock()
	defer fake.tryEmitUsageMutex.Unlock()
	fake.TryEmitUsageStub = stub
}

func (fake *FakeMetricsEmitter) TryEmitUsageArgsForCall(i int) (lager.Logger, string, int64, string) {
	fake.tryEmitUsageMutex.RLock()
	defer fake.tryEmitUsageMutex.RUnlock()
	argsForCall := fake.tryEmitUsageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMetricsEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryEmitDurationFromMutex.RLock()
	defer fake.tryEmitDurationFromMutex.RUnlock()
	fake.tryEmitUsageMutex.RLock()
	defer fake.tryEmitUsageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.MetricsEmitter = new(FakeMetricsEmitter)
