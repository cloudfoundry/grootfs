// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"os"
	"sync"
	"time"

	"code.cloudfoundry.org/grootfs/groot"
)

type FakeLocksmith struct {
	LockStub        func(string) (*os.File, error)
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		arg1 string
	}
	lockReturns struct {
		result1 *os.File
		result2 error
	}
	lockReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	LockWithTimeoutStub        func(string, time.Duration) (*os.File, error)
	lockWithTimeoutMutex       sync.RWMutex
	lockWithTimeoutArgsForCall []struct {
		arg1 string
		arg2 time.Duration
	}
	lockWithTimeoutReturns struct {
		result1 *os.File
		result2 error
	}
	lockWithTimeoutReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	UnlockStub        func(*os.File) error
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct {
		arg1 *os.File
	}
	unlockReturns struct {
		result1 error
	}
	unlockReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLocksmith) Lock(arg1 string) (*os.File, error) {
	fake.lockMutex.Lock()
	ret, specificReturn := fake.lockReturnsOnCall[len(fake.lockArgsForCall)]
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LockStub
	fakeReturns := fake.lockReturns
	fake.recordInvocation("Lock", []interface{}{arg1})
	fake.lockMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLocksmith) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeLocksmith) LockCalls(stub func(string) (*os.File, error)) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = stub
}

func (fake *FakeLocksmith) LockArgsForCall(i int) string {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	argsForCall := fake.lockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLocksmith) LockReturns(result1 *os.File, result2 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeLocksmith) LockReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	if fake.lockReturnsOnCall == nil {
		fake.lockReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.lockReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeLocksmith) LockWithTimeout(arg1 string, arg2 time.Duration) (*os.File, error) {
	fake.lockWithTimeoutMutex.Lock()
	ret, specificReturn := fake.lockWithTimeoutReturnsOnCall[len(fake.lockWithTimeoutArgsForCall)]
	fake.lockWithTimeoutArgsForCall = append(fake.lockWithTimeoutArgsForCall, struct {
		arg1 string
		arg2 time.Duration
	}{arg1, arg2})
	stub := fake.LockWithTimeoutStub
	fakeReturns := fake.lockWithTimeoutReturns
	fake.recordInvocation("LockWithTimeout", []interface{}{arg1, arg2})
	fake.lockWithTimeoutMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLocksmith) LockWithTimeoutCallCount() int {
	fake.lockWithTimeoutMutex.RLock()
	defer fake.lockWithTimeoutMutex.RUnlock()
	return len(fake.lockWithTimeoutArgsForCall)
}

func (fake *FakeLocksmith) LockWithTimeoutCalls(stub func(string, time.Duration) (*os.File, error)) {
	fake.lockWithTimeoutMutex.Lock()
	defer fake.lockWithTimeoutMutex.Unlock()
	fake.LockWithTimeoutStub = stub
}

func (fake *FakeLocksmith) LockWithTimeoutArgsForCall(i int) (string, time.Duration) {
	fake.lockWithTimeoutMutex.RLock()
	defer fake.lockWithTimeoutMutex.RUnlock()
	argsForCall := fake.lockWithTimeoutArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLocksmith) LockWithTimeoutReturns(result1 *os.File, result2 error) {
	fake.lockWithTimeoutMutex.Lock()
	defer fake.lockWithTimeoutMutex.Unlock()
	fake.LockWithTimeoutStub = nil
	fake.lockWithTimeoutReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeLocksmith) LockWithTimeoutReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.lockWithTimeoutMutex.Lock()
	defer fake.lockWithTimeoutMutex.Unlock()
	fake.LockWithTimeoutStub = nil
	if fake.lockWithTimeoutReturnsOnCall == nil {
		fake.lockWithTimeoutReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.lockWithTimeoutReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeLocksmith) Unlock(arg1 *os.File) error {
	fake.unlockMutex.Lock()
	ret, specificReturn := fake.unlockReturnsOnCall[len(fake.unlockArgsForCall)]
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct {
		arg1 *os.File
	}{arg1})
	stub := fake.UnlockStub
	fakeReturns := fake.unlockReturns
	fake.recordInvocation("Unlock", []interface{}{arg1})
	fake.unlockMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLocksmith) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeLocksmith) UnlockCalls(stub func(*os.File) error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = stub
}

func (fake *FakeLocksmith) UnlockArgsForCall(i int) *os.File {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	argsForCall := fake.unlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLocksmith) UnlockReturns(result1 error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = nil
	fake.unlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLocksmith) UnlockReturnsOnCall(i int, result1 error) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = nil
	if fake.unlockReturnsOnCall == nil {
		fake.unlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLocksmith) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.lockWithTimeoutMutex.RLock()
	defer fake.lockWithTimeoutMutex.RUnlock()
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLocksmith) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.Locksmith = new(FakeLocksmith)
