// Code generated by counterfeiter. DO NOT EDIT.
package loopbackfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store/filesystems/loopback"
)

type FakeLoSetup struct {
	EnableDirectIOStub        func(string) error
	enableDirectIOMutex       sync.RWMutex
	enableDirectIOArgsForCall []struct {
		arg1 string
	}
	enableDirectIOReturns struct {
		result1 error
	}
	enableDirectIOReturnsOnCall map[int]struct {
		result1 error
	}
	FindAssociatedLoopDeviceStub        func(string) (string, error)
	findAssociatedLoopDeviceMutex       sync.RWMutex
	findAssociatedLoopDeviceArgsForCall []struct {
		arg1 string
	}
	findAssociatedLoopDeviceReturns struct {
		result1 string
		result2 error
	}
	findAssociatedLoopDeviceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoSetup) EnableDirectIO(arg1 string) error {
	fake.enableDirectIOMutex.Lock()
	ret, specificReturn := fake.enableDirectIOReturnsOnCall[len(fake.enableDirectIOArgsForCall)]
	fake.enableDirectIOArgsForCall = append(fake.enableDirectIOArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EnableDirectIO", []interface{}{arg1})
	fake.enableDirectIOMutex.Unlock()
	if fake.EnableDirectIOStub != nil {
		return fake.EnableDirectIOStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enableDirectIOReturns
	return fakeReturns.result1
}

func (fake *FakeLoSetup) EnableDirectIOCallCount() int {
	fake.enableDirectIOMutex.RLock()
	defer fake.enableDirectIOMutex.RUnlock()
	return len(fake.enableDirectIOArgsForCall)
}

func (fake *FakeLoSetup) EnableDirectIOCalls(stub func(string) error) {
	fake.enableDirectIOMutex.Lock()
	defer fake.enableDirectIOMutex.Unlock()
	fake.EnableDirectIOStub = stub
}

func (fake *FakeLoSetup) EnableDirectIOArgsForCall(i int) string {
	fake.enableDirectIOMutex.RLock()
	defer fake.enableDirectIOMutex.RUnlock()
	argsForCall := fake.enableDirectIOArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoSetup) EnableDirectIOReturns(result1 error) {
	fake.enableDirectIOMutex.Lock()
	defer fake.enableDirectIOMutex.Unlock()
	fake.EnableDirectIOStub = nil
	fake.enableDirectIOReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoSetup) EnableDirectIOReturnsOnCall(i int, result1 error) {
	fake.enableDirectIOMutex.Lock()
	defer fake.enableDirectIOMutex.Unlock()
	fake.EnableDirectIOStub = nil
	if fake.enableDirectIOReturnsOnCall == nil {
		fake.enableDirectIOReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableDirectIOReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoSetup) FindAssociatedLoopDevice(arg1 string) (string, error) {
	fake.findAssociatedLoopDeviceMutex.Lock()
	ret, specificReturn := fake.findAssociatedLoopDeviceReturnsOnCall[len(fake.findAssociatedLoopDeviceArgsForCall)]
	fake.findAssociatedLoopDeviceArgsForCall = append(fake.findAssociatedLoopDeviceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindAssociatedLoopDevice", []interface{}{arg1})
	fake.findAssociatedLoopDeviceMutex.Unlock()
	if fake.FindAssociatedLoopDeviceStub != nil {
		return fake.FindAssociatedLoopDeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findAssociatedLoopDeviceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoSetup) FindAssociatedLoopDeviceCallCount() int {
	fake.findAssociatedLoopDeviceMutex.RLock()
	defer fake.findAssociatedLoopDeviceMutex.RUnlock()
	return len(fake.findAssociatedLoopDeviceArgsForCall)
}

func (fake *FakeLoSetup) FindAssociatedLoopDeviceCalls(stub func(string) (string, error)) {
	fake.findAssociatedLoopDeviceMutex.Lock()
	defer fake.findAssociatedLoopDeviceMutex.Unlock()
	fake.FindAssociatedLoopDeviceStub = stub
}

func (fake *FakeLoSetup) FindAssociatedLoopDeviceArgsForCall(i int) string {
	fake.findAssociatedLoopDeviceMutex.RLock()
	defer fake.findAssociatedLoopDeviceMutex.RUnlock()
	argsForCall := fake.findAssociatedLoopDeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoSetup) FindAssociatedLoopDeviceReturns(result1 string, result2 error) {
	fake.findAssociatedLoopDeviceMutex.Lock()
	defer fake.findAssociatedLoopDeviceMutex.Unlock()
	fake.FindAssociatedLoopDeviceStub = nil
	fake.findAssociatedLoopDeviceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLoSetup) FindAssociatedLoopDeviceReturnsOnCall(i int, result1 string, result2 error) {
	fake.findAssociatedLoopDeviceMutex.Lock()
	defer fake.findAssociatedLoopDeviceMutex.Unlock()
	fake.FindAssociatedLoopDeviceStub = nil
	if fake.findAssociatedLoopDeviceReturnsOnCall == nil {
		fake.findAssociatedLoopDeviceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.findAssociatedLoopDeviceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLoSetup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableDirectIOMutex.RLock()
	defer fake.enableDirectIOMutex.RUnlock()
	fake.findAssociatedLoopDeviceMutex.RLock()
	defer fake.findAssociatedLoopDeviceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLoSetup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loopback.LoSetup = new(FakeLoSetup)
