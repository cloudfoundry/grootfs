// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store"
	"code.cloudfoundry.org/lager"
)

type FakeUnusedVolumeGetter struct {
	UnusedVolumesStub        func(lager.Logger) ([]string, error)
	unusedVolumesMutex       sync.RWMutex
	unusedVolumesArgsForCall []struct {
		arg1 lager.Logger
	}
	unusedVolumesReturns struct {
		result1 []string
		result2 error
	}
	unusedVolumesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumes(arg1 lager.Logger) ([]string, error) {
	fake.unusedVolumesMutex.Lock()
	ret, specificReturn := fake.unusedVolumesReturnsOnCall[len(fake.unusedVolumesArgsForCall)]
	fake.unusedVolumesArgsForCall = append(fake.unusedVolumesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.UnusedVolumesStub
	fakeReturns := fake.unusedVolumesReturns
	fake.recordInvocation("UnusedVolumes", []interface{}{arg1})
	fake.unusedVolumesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumesCallCount() int {
	fake.unusedVolumesMutex.RLock()
	defer fake.unusedVolumesMutex.RUnlock()
	return len(fake.unusedVolumesArgsForCall)
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumesCalls(stub func(lager.Logger) ([]string, error)) {
	fake.unusedVolumesMutex.Lock()
	defer fake.unusedVolumesMutex.Unlock()
	fake.UnusedVolumesStub = stub
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumesArgsForCall(i int) lager.Logger {
	fake.unusedVolumesMutex.RLock()
	defer fake.unusedVolumesMutex.RUnlock()
	argsForCall := fake.unusedVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumesReturns(result1 []string, result2 error) {
	fake.unusedVolumesMutex.Lock()
	defer fake.unusedVolumesMutex.Unlock()
	fake.UnusedVolumesStub = nil
	fake.unusedVolumesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeUnusedVolumeGetter) UnusedVolumesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.unusedVolumesMutex.Lock()
	defer fake.unusedVolumesMutex.Unlock()
	fake.UnusedVolumesStub = nil
	if fake.unusedVolumesReturnsOnCall == nil {
		fake.unusedVolumesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.unusedVolumesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeUnusedVolumeGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unusedVolumesMutex.RLock()
	defer fake.unusedVolumesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnusedVolumeGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.UnusedVolumeGetter = new(FakeUnusedVolumeGetter)
