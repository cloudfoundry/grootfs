// Code generated by counterfeiter. DO NOT EDIT.
package garbage_collectorfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store/garbage_collector"
	"code.cloudfoundry.org/lager"
)

type FakeImageIDsGetter struct {
	ImageIDsStub        func(lager.Logger) ([]string, error)
	imageIDsMutex       sync.RWMutex
	imageIDsArgsForCall []struct {
		arg1 lager.Logger
	}
	imageIDsReturns struct {
		result1 []string
		result2 error
	}
	imageIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageIDsGetter) ImageIDs(arg1 lager.Logger) ([]string, error) {
	fake.imageIDsMutex.Lock()
	ret, specificReturn := fake.imageIDsReturnsOnCall[len(fake.imageIDsArgsForCall)]
	fake.imageIDsArgsForCall = append(fake.imageIDsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("ImageIDs", []interface{}{arg1})
	fake.imageIDsMutex.Unlock()
	if fake.ImageIDsStub != nil {
		return fake.ImageIDsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.imageIDsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageIDsGetter) ImageIDsCallCount() int {
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	return len(fake.imageIDsArgsForCall)
}

func (fake *FakeImageIDsGetter) ImageIDsCalls(stub func(lager.Logger) ([]string, error)) {
	fake.imageIDsMutex.Lock()
	defer fake.imageIDsMutex.Unlock()
	fake.ImageIDsStub = stub
}

func (fake *FakeImageIDsGetter) ImageIDsArgsForCall(i int) lager.Logger {
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	argsForCall := fake.imageIDsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageIDsGetter) ImageIDsReturns(result1 []string, result2 error) {
	fake.imageIDsMutex.Lock()
	defer fake.imageIDsMutex.Unlock()
	fake.ImageIDsStub = nil
	fake.imageIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageIDsGetter) ImageIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.imageIDsMutex.Lock()
	defer fake.imageIDsMutex.Unlock()
	fake.ImageIDsStub = nil
	if fake.imageIDsReturnsOnCall == nil {
		fake.imageIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.imageIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageIDsGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageIDsGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ garbage_collector.ImageIDsGetter = new(FakeImageIDsGetter)
