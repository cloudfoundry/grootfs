// Code generated by counterfeiter. DO NOT EDIT.
package garbage_collectorfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store/garbage_collector"
)

type FakeDependencyManager struct {
	DependenciesStub        func(string) ([]string, error)
	dependenciesMutex       sync.RWMutex
	dependenciesArgsForCall []struct {
		arg1 string
	}
	dependenciesReturns struct {
		result1 []string
		result2 error
	}
	dependenciesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDependencyManager) Dependencies(arg1 string) ([]string, error) {
	fake.dependenciesMutex.Lock()
	ret, specificReturn := fake.dependenciesReturnsOnCall[len(fake.dependenciesArgsForCall)]
	fake.dependenciesArgsForCall = append(fake.dependenciesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DependenciesStub
	fakeReturns := fake.dependenciesReturns
	fake.recordInvocation("Dependencies", []interface{}{arg1})
	fake.dependenciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDependencyManager) DependenciesCallCount() int {
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	return len(fake.dependenciesArgsForCall)
}

func (fake *FakeDependencyManager) DependenciesCalls(stub func(string) ([]string, error)) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = stub
}

func (fake *FakeDependencyManager) DependenciesArgsForCall(i int) string {
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	argsForCall := fake.dependenciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDependencyManager) DependenciesReturns(result1 []string, result2 error) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = nil
	fake.dependenciesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDependencyManager) DependenciesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = nil
	if fake.dependenciesReturnsOnCall == nil {
		fake.dependenciesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.dependenciesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDependencyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDependencyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ garbage_collector.DependencyManager = new(FakeDependencyManager)
