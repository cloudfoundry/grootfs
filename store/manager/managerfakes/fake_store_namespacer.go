// Code generated by counterfeiter. DO NOT EDIT.
package managerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/grootfs/store/manager"
)

type FakeStoreNamespacer struct {
	ApplyMappingsStub        func([]groot.IDMappingSpec, []groot.IDMappingSpec) error
	applyMappingsMutex       sync.RWMutex
	applyMappingsArgsForCall []struct {
		arg1 []groot.IDMappingSpec
		arg2 []groot.IDMappingSpec
	}
	applyMappingsReturns struct {
		result1 error
	}
	applyMappingsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreNamespacer) ApplyMappings(arg1 []groot.IDMappingSpec, arg2 []groot.IDMappingSpec) error {
	var arg1Copy []groot.IDMappingSpec
	if arg1 != nil {
		arg1Copy = make([]groot.IDMappingSpec, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []groot.IDMappingSpec
	if arg2 != nil {
		arg2Copy = make([]groot.IDMappingSpec, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.applyMappingsMutex.Lock()
	ret, specificReturn := fake.applyMappingsReturnsOnCall[len(fake.applyMappingsArgsForCall)]
	fake.applyMappingsArgsForCall = append(fake.applyMappingsArgsForCall, struct {
		arg1 []groot.IDMappingSpec
		arg2 []groot.IDMappingSpec
	}{arg1Copy, arg2Copy})
	stub := fake.ApplyMappingsStub
	fakeReturns := fake.applyMappingsReturns
	fake.recordInvocation("ApplyMappings", []interface{}{arg1Copy, arg2Copy})
	fake.applyMappingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreNamespacer) ApplyMappingsCallCount() int {
	fake.applyMappingsMutex.RLock()
	defer fake.applyMappingsMutex.RUnlock()
	return len(fake.applyMappingsArgsForCall)
}

func (fake *FakeStoreNamespacer) ApplyMappingsCalls(stub func([]groot.IDMappingSpec, []groot.IDMappingSpec) error) {
	fake.applyMappingsMutex.Lock()
	defer fake.applyMappingsMutex.Unlock()
	fake.ApplyMappingsStub = stub
}

func (fake *FakeStoreNamespacer) ApplyMappingsArgsForCall(i int) ([]groot.IDMappingSpec, []groot.IDMappingSpec) {
	fake.applyMappingsMutex.RLock()
	defer fake.applyMappingsMutex.RUnlock()
	argsForCall := fake.applyMappingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreNamespacer) ApplyMappingsReturns(result1 error) {
	fake.applyMappingsMutex.Lock()
	defer fake.applyMappingsMutex.Unlock()
	fake.ApplyMappingsStub = nil
	fake.applyMappingsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreNamespacer) ApplyMappingsReturnsOnCall(i int, result1 error) {
	fake.applyMappingsMutex.Lock()
	defer fake.applyMappingsMutex.Unlock()
	fake.ApplyMappingsStub = nil
	if fake.applyMappingsReturnsOnCall == nil {
		fake.applyMappingsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyMappingsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreNamespacer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMappingsMutex.RLock()
	defer fake.applyMappingsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreNamespacer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ manager.StoreNamespacer = new(FakeStoreNamespacer)
